#+TITLE: Annotation Tool
#+PROPERTY: header-args :tangle yes :output drawer

* notes
** Tasks
*** DONE Given a task (id, center, left, right), display it
DEADLINE: <2020-02-25 Tue>
*** DONE Get an incomplete task for the user from firebase
DEADLINE: <2020-02-25 Tue>
*** DONE Write the result of a task to the database
DEADLINE: <2020-02-25 Tue>
**** DONE Make a form to submit the task annotation
*** TODO Assign tasks to users
DEADLINE: <2020-02-25 Tue>
**** [X] Set user limits (min/max number of tasks) user must complete
**** [X] Set min/max number of annotaters per task
**** [X] When user requests a task, select a task that requires doing
weight by how many tasks are partially complete and how many are incomplete
**** [ ] When a new user is assigned a group, unassign all tasks they have already done and reassign all tasks from their new group
*** DONE Add option to enable and disable tasks
DEADLINE: <2020-03-02 Mon>
*** Security
**** BLOCKED Fix authentication to prevent people from deleting things randomly
- Users shouldn't be able to write anything directly
- Ideally, there is a ~getTaskForUID~ and ~submitAnnotation~ function
- https://firebase.google.com/docs/database/security/user-security
** Data Model
*** Task model
#+BEGIN_SRC js
var task = {
    task_id: "id",
    taskset: "name", //name of the task set released (subfolder on git)
    data: {
        type: "a_b_parse", //type of annotation task - defines template to render
        sentence: "sentence", //sentence in question
        reference: "url", //url of gold annotation
        first: "url", //url of first alternative
        second: "url", //url of second alternative
    },
    requirements: { //requirements are used as an ^ situation.  Put in as many or as few as desired
        coverage: 1, //number of annotators desired
        annotators: [], //annotator ids
        agreement: 0 // percentage of agreement required
    },
    annotations: ["ids"] // list of annotations performed
    is_active: true // whether the task is active
};
#+END_SRC
#+BEGIN_SRC js
var taskset = {
    groups: [
        { type: "students", set: 0 }
    ],
    items: 4,
    type: "a_b_parse"
}
#+END_SRC
**** DONE get tripscli to output task json lists
DEADLINE: <2020-02-26 Wed>
**** DONE translate gold annotations from will's tool into task json lists
DEADLINE: <2020-02-26 Wed>
**** DONE upload tasks.  Reject multiple tasks with the same sentence (for now)
DEADLINE: <2020-02-26 Wed>
**** DONE retrieve a random task incomplete task  for testing purposes
DEADLINE: <2020-02-26 Wed>
*** Annotation model
#+BEGIN_SRC js
var annotation = {
    annotation_id: "id" // an id number for this annotation
    time: "<2020-02-26 Wed 04:22 EST>",
    user_id: "id",
    task_id: "id",
    annotation: { // any data that is considered an annotation
        closer: "first" // "second" | "same" | "neither"
    }
};
#+END_SRC
**** DONE Add annotation to database
DEADLINE: <2020-02-26 Wed>
***** DONE Add ~annotation_id~ to user and ~task~
**** DONE Ensure that task/annotator pair doesn't exist
DEADLINE: <2020-02-26 Wed>
- Made sure instead that each pair has a timestamp
**** DONE Return success or failure
*** User Model
#+BEGIN_SRC js
var user = {
    id: "id_number",
    groups: { type: "student", set: 0 }, // how the annoatator should be treated
    tasks: {
        assigned: ["task_id"], // list of annotations
        complete: ["annotation_id"], // list of annotations
        total: 0,
        remaining: 0,
    }
    queue: ["task_id"],
    limits: {
        min: 3, // minimum number of annotations required from user
        max: 10000, // maximum number of annotations allowed from user
        types: [] // if this list is populated and not empty, only allow task types listed within to be annotated by the user
    }
}

var group = { 0: ["test"] }; // a list of tasksets for each set
#+END_SRC
**** DONE Ensure that all this information is autopopulated
DEADLINE: <2020-02-26 Wed>
** Queries
*** Task allocation
When a user selects a task:
1. Select new task or partially fulfilled
2. Collect all tasks of that type
3. if an incomplete task for the user is available, return it
4. adjust probability of new/partial task as necessary to get things done
**** DONE Write query
DEADLINE: <2020-02-26 Wed>
*** Task Completion:
Form should write an annotation object, reject if annotation exists
*** [Extension] Dashboard
See previously completed annotations.  If desired an annotation could be deleted
from here
*** User has completed task
*** User has completed enough tasks
*** Estimate: Enough tasks exist
** Dashboard
*** Tasks
**** How many tasks exist
**** Display annotation
**** Annotator agreement
*** User
**** Tasks annotated
**** Annotator agreement (against all other annotators)
* UI/UX
** Task upload Flow
1. Generate tasks - file:/data/prepare.sh
   1. Specify 3 parses - Gold, first, second
   2. Ensure the parses are different
2. Upload parses as a task set ~./cli.py upload~
3. Assign task set to user group ~./cli.py assign~
4. Activate or deactivate task
5. Retrieve a daily dump of the database
   1. make sure to take user email
** User creation Flow
1. User creates account
2. User is assigned to a group
3. User is assigned active tasks for group
4. User email should be verified
** User annotation Flow
Instead of removing an annotation from the assigned list when it is completed
might be better to simply attach a list of annotation objects to it within the
user object
#+BEGIN_SRC json
[{
    "task_id": "id1",
    "annotations": []
},
{
    "task_id": "id2",
    "annotations": ["annotationid1","annotationid2"]
}]
#+END_SRC
1. User logs in
   1. is redirected to annotation page
2. User is presented with a task
3. User submits task
4. User is presented with another task
5. User is shown remaining tasks
   #
6. User can select to update completed tasks
* Now
** DONE change annotation format
*** [X] change format in user object
*** [X] Change upload to add to a list
*** [X] Change query to get next task
*** [X] Change function to submit task
*** [X] TEST
** DONE Refactor task loading code to be recallable
** DONE Automatically load next task
** NOW Message when no tasks remaining
** DONE Wait for submission to load next task
** DONE Logout button
** DONE Automatically load logged in page if logged in
** NOW Update User management
*** [X] assign tasks for user type
*** [X] trigger on user create
*** [-] trigger onChange group
*** [-] trigger onChange user group assignment
***** Since this is done manually, we could just try it manually
** NOW Better task selection
Many task-pairs are not particularly different.  Try to generate tasks that are interesting.
*** DONE define interesting
*** [ ] generate interesting
1. Did I generate them fairly?
2. Can I generate more by randomly perturbing the parses?
** DONE Rerun candidates against updated STEP
Many of the parses were gold annotated during periods with systematic errors in
the parse.  Rerun parses using up-to-date parser.
*** [X] rerun and store parses in xml format
*** [X] load gold from original and candidates from reruns
** NOW Make a video describing the annotation tool
** NOW Get some AMR parses to run too
*** [ ] generate task representation for AMR
Just need reference, first, second, and the corresponding SVG's
*** [ ] contact Dan and ask for manpower to annotate 100 sentences
